spring:
  main:
    allow-bean-definition-overriding: true
  h2:
    console:
      enabled: true
      path: /h2
  redis:
    host: localhost
    port: 6379
  datasource:
    url: jdbc:h2:mem:test
    driver-class-name: org.h2.Driver
    username: sa
    password:
  servlet:
    multipart:
      max-file-size: 500MB
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: create
    properties:
      hibernate:
        format_sql: true
  security:
    oauth2:
      client:
        registration:
          google:
            clientId: 825192285646-l2lgiu4ao2epb4igom55rp3puiuthont.apps.googleusercontent.com
            clientSecret: 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
            #clientId: ${G_CLIENT_ID}
            #clientSecret: ${G_CLIENT_SECRET}
            scope:
              - email
              - profile
          naver:
            clientId: Kk3cnANrPyL8axgOzGJc
            clientSecret: MI1kih3MPS
            clientAuthenticationMethod: post
            authorizationGrantType: authorization_code
            redirectUri: http://localhost:8080/login/oauth2/code/naver
            scope:
              - nickname
              - email
              - profile_image
            clientName: Naver
          kakao:
            clientId: b59c7d76059de1cb660fbbb767659254
            clientSecret: GkVauCHtjTPgwlluuUqk3pbNw148yo1t
            clientAuthenticationMethod: post
            authorizationGrantType: authorization_code
            redirectUri: http://localhost:8080/login/oauth2/code/kakao
            scope:
              - profile_nickname
              - profile_image
              - account_email
            clientName: Kakao
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
          naver:
            authorization_uri: https://nid.naver.com/oauth2.0/authorize
            token_uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user_name_attribute: response

jwt:
  secret-key: ${JWT_SECRET_KEY}       # 민감한 정보는 시스템 환경 변수에서 로드한다.
  access-token-expiration-minutes: 420
  refresh-token-expiration-minutes: 420
aes:
  secret-key: 970d8c1e726c39839da31a52a4968cf6 #dusqhdtkacjsdhqoraksqkewk3500
mail:
  smtp:
    host: smtp.gmail.com
    port: 587
    username: sayoproject2023@gmail.com
    password: msxbvigqkpyphigg
    auth: true
    starttls:
      enable: true
  subject:
    user:
      registration: 공동구매플랫폼 SAYO서비스에 성공적으로 가입하셨습니다.
  template:
    name:
      user:
        join: email-registration-user
#  address:
#    admin: admin@gmail.com, test@gmail.com
payments:
  toss:
    test_secret_api_key: ${TOSS_SECRET_KEY}
    test_client_api_key: ${TOSS_CLIENT_KEY}
cloud:
  aws:
    credentials:
      access-key: ${S3_ACCESS_KEY}
      secret-key: ${S3_SECRET_KEY}
    s3: #버킷이름
      bucket: ${S3_BUCKET}
    region: #S3 지역
      static: ${S3_REGION}
    stack:
      auto: false

#logging:
#  level:
#    org.hibernate.SQL: debug
#    org.hibernate.type: trace
